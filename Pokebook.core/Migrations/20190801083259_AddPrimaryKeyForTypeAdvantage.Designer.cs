// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pokebook.core.Data;

namespace Pokebook.core.Migrations
{
    [DbContext(typeof(PokebookContext))]
    [Migration("20190801083259_AddPrimaryKeyForTypeAdvantage")]
    partial class AddPrimaryKeyForTypeAdvantage
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Pokebook.core.Models.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("CreatorId");

                    b.Property<string>("Image");

                    b.Property<string>("LastMessage");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("NumberOfMessages");

                    b.Property<int>("NumberOfUsers");

                    b.Property<string>("Theme");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Pokebook.core.Models.Friendship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Accepted");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("IdApprover");

                    b.Property<Guid>("IdRequester");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("Pokebook.core.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ChatId");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("ImageName");

                    b.Property<DateTime>("SendDate");

                    b.Property<Guid>("SenderId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Pokebook.core.Models.Move", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("Generation");

                    b.Property<string>("Name");

                    b.Property<Guid?>("PokemonCatchId");

                    b.HasKey("Id");

                    b.HasIndex("PokemonCatchId");

                    b.ToTable("Moves");
                });

            modelBuilder.Entity("Pokebook.core.Models.Pokemon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("Description");

                    b.Property<bool>("HasAllolanForm");

                    b.Property<string>("ImgUrl");

                    b.Property<string>("Location");

                    b.Property<int>("MaxCP");

                    b.Property<int>("MaxHP");

                    b.Property<float>("MaxHeight");

                    b.Property<float>("MaxWeight");

                    b.Property<int>("MinCP");

                    b.Property<int>("MinHP");

                    b.Property<float>("MinHeight");

                    b.Property<float>("MinWeight");

                    b.Property<short>("NDex");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Pokemons");
                });

            modelBuilder.Entity("Pokebook.core.Models.PokemonCatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CP");

                    b.Property<DateTime?>("Created");

                    b.Property<int>("HP");

                    b.Property<float>("Height");

                    b.Property<Guid>("PokemonId");

                    b.Property<Guid>("UserId");

                    b.Property<float>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("PokemonId");

                    b.HasIndex("UserId");

                    b.ToTable("PokemonCatches");
                });

            modelBuilder.Entity("Pokebook.core.Models.PokemonEvolution", b =>
                {
                    b.Property<Guid>("BasePokemonId");

                    b.Property<Guid>("EvolutionId");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid>("Id");

                    b.HasKey("BasePokemonId", "EvolutionId");

                    b.HasIndex("EvolutionId");

                    b.ToTable("PokemonEvolutions");
                });

            modelBuilder.Entity("Pokebook.core.Models.PokemonMove", b =>
                {
                    b.Property<Guid>("PokemonId");

                    b.Property<Guid>("MoveId");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid>("Id");

                    b.HasKey("PokemonId", "MoveId");

                    b.HasIndex("MoveId");

                    b.ToTable("PokemonMoves");
                });

            modelBuilder.Entity("Pokebook.core.Models.PokemonType", b =>
                {
                    b.Property<Guid>("PokemonId");

                    b.Property<Guid>("TypeId");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid>("Id");

                    b.HasKey("PokemonId", "TypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("PokemonTypes");
                });

            modelBuilder.Entity("Pokebook.core.Models.PokemonUser", b =>
                {
                    b.Property<Guid>("PokemonId");

                    b.Property<Guid>("UserId");

                    b.Property<short>("Catches");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid>("Id");

                    b.HasKey("PokemonId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PokemonUsers");
                });

            modelBuilder.Entity("Pokebook.core.Models.Type", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Colour");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("MoveId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("MoveId");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("Pokebook.core.Models.TypeAdvantage", b =>
                {
                    b.Property<Guid>("AdvantageTypeId");

                    b.Property<Guid>("DisadvantageTypeId");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid>("Id");

                    b.HasKey("AdvantageTypeId", "DisadvantageTypeId");

                    b.HasIndex("DisadvantageTypeId");

                    b.ToTable("TypeAdvantages");
                });

            modelBuilder.Entity("Pokebook.core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("CoverPicture");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FavoritePokemon");

                    b.Property<string>("FavoritePokemonGame");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTime>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<int>("NumberOfFriends");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ProfilePicture");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Pokebook.core.Models.UserChat", b =>
                {
                    b.Property<Guid>("ChatId");

                    b.Property<Guid>("UserId");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid>("Id");

                    b.HasKey("ChatId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChats");
                });

            modelBuilder.Entity("Pokebook.core.Models.Friendship", b =>
                {
                    b.HasOne("Pokebook.core.Models.User")
                        .WithMany("Friendships")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Pokebook.core.Models.Message", b =>
                {
                    b.HasOne("Pokebook.core.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pokebook.core.Models.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pokebook.core.Models.Move", b =>
                {
                    b.HasOne("Pokebook.core.Models.PokemonCatch")
                        .WithMany("Moves")
                        .HasForeignKey("PokemonCatchId");
                });

            modelBuilder.Entity("Pokebook.core.Models.PokemonCatch", b =>
                {
                    b.HasOne("Pokebook.core.Models.Pokemon", "Pokemon")
                        .WithMany()
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pokebook.core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pokebook.core.Models.PokemonEvolution", b =>
                {
                    b.HasOne("Pokebook.core.Models.Pokemon", "BasePokemon")
                        .WithMany("PokemonPreEvolutions")
                        .HasForeignKey("BasePokemonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pokebook.core.Models.Pokemon", "Evolution")
                        .WithMany("PokemonEvolutions")
                        .HasForeignKey("EvolutionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pokebook.core.Models.PokemonMove", b =>
                {
                    b.HasOne("Pokebook.core.Models.Move", "Move")
                        .WithMany("PokemonMoves")
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pokebook.core.Models.Pokemon", "Pokemon")
                        .WithMany("PokemonMoves")
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pokebook.core.Models.PokemonType", b =>
                {
                    b.HasOne("Pokebook.core.Models.Pokemon", "Pokemon")
                        .WithMany("PokemonTypes")
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pokebook.core.Models.Type", "Type")
                        .WithMany("PokemonTypes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pokebook.core.Models.PokemonUser", b =>
                {
                    b.HasOne("Pokebook.core.Models.Pokemon", "Pokemon")
                        .WithMany()
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pokebook.core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pokebook.core.Models.Type", b =>
                {
                    b.HasOne("Pokebook.core.Models.Move")
                        .WithMany("Types")
                        .HasForeignKey("MoveId");
                });

            modelBuilder.Entity("Pokebook.core.Models.TypeAdvantage", b =>
                {
                    b.HasOne("Pokebook.core.Models.Type", "AdvantageType")
                        .WithMany("AdvantagesOver")
                        .HasForeignKey("AdvantageTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pokebook.core.Models.Type", "DisadvantageType")
                        .WithMany("DisadvantagesOver")
                        .HasForeignKey("DisadvantageTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pokebook.core.Models.UserChat", b =>
                {
                    b.HasOne("Pokebook.core.Models.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pokebook.core.Models.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
